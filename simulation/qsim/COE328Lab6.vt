// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2023 16:10:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	Enable_Decoder,
	FSM_reset,
	Reset_A,
	Reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  Enable_Decoder;
input  FSM_reset;
input  Reset_A;
input  Reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or Enable_Decoder or FSM_reset or Reset_A or Reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab6_vlg_check_tst (
	currentState,
	OPERATOR,
	R1Binary,
	R2Binary,
	R_first_four,
	R_last_four,
	Sign,
	student_id,
	sampler_rx
);
input [0:3] currentState;
input [0:15] OPERATOR;
input [0:3] R1Binary;
input [0:3] R2Binary;
input [1:7] R_first_four;
input [1:7] R_last_four;
input [1:7] Sign;
input [1:7] student_id;
input sampler_rx;

reg [0:3] currentState_expected;
reg [0:15] OPERATOR_expected;
reg [0:3] R1Binary_expected;
reg [0:3] R2Binary_expected;
reg [1:7] R_first_four_expected;
reg [1:7] R_last_four_expected;
reg [1:7] Sign_expected;
reg [1:7] student_id_expected;

reg [0:3] currentState_prev;
reg [0:15] OPERATOR_prev;
reg [0:3] R1Binary_prev;
reg [0:3] R2Binary_prev;
reg [1:7] R_first_four_prev;
reg [1:7] R_last_four_prev;
reg [1:7] Sign_prev;
reg [1:7] student_id_prev;

reg [0:3] currentState_expected_prev;
reg [0:15] OPERATOR_expected_prev;
reg [0:3] R1Binary_expected_prev;
reg [0:3] R2Binary_expected_prev;
reg [1:7] Sign_expected_prev;
reg [1:7] student_id_expected_prev;

reg [0:3] last_currentState_exp;
reg [0:15] last_OPERATOR_exp;
reg [0:3] last_R1Binary_exp;
reg [0:3] last_R2Binary_exp;
reg [1:7] last_Sign_exp;
reg [1:7] last_student_id_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	currentState_prev = currentState;
	OPERATOR_prev = OPERATOR;
	R1Binary_prev = R1Binary;
	R2Binary_prev = R2Binary;
	R_first_four_prev = R_first_four;
	R_last_four_prev = R_last_four;
	Sign_prev = Sign;
	student_id_prev = student_id;
end

// update expected /o prevs

always @(trigger)
begin
	currentState_expected_prev = currentState_expected;
	OPERATOR_expected_prev = OPERATOR_expected;
	R1Binary_expected_prev = R1Binary_expected;
	R2Binary_expected_prev = R2Binary_expected;
	Sign_expected_prev = Sign_expected;
	student_id_expected_prev = student_id_expected;
end


// expected currentState[ 3 ]
initial
begin
	currentState_expected[3] = 1'bX;
end 
// expected currentState[ 2 ]
initial
begin
	currentState_expected[2] = 1'bX;
end 
// expected currentState[ 1 ]
initial
begin
	currentState_expected[1] = 1'bX;
end 
// expected currentState[ 0 ]
initial
begin
	currentState_expected[0] = 1'bX;
end 
// expected R2Binary[ 3 ]
initial
begin
	R2Binary_expected[3] = 1'bX;
end 
// expected R2Binary[ 2 ]
initial
begin
	R2Binary_expected[2] = 1'bX;
end 
// expected R2Binary[ 1 ]
initial
begin
	R2Binary_expected[1] = 1'bX;
end 
// expected R2Binary[ 0 ]
initial
begin
	R2Binary_expected[0] = 1'bX;
end 
// expected R1Binary[ 3 ]
initial
begin
	R1Binary_expected[3] = 1'bX;
end 
// expected R1Binary[ 2 ]
initial
begin
	R1Binary_expected[2] = 1'bX;
end 
// expected R1Binary[ 1 ]
initial
begin
	R1Binary_expected[1] = 1'bX;
end 
// expected R1Binary[ 0 ]
initial
begin
	R1Binary_expected[0] = 1'bX;
end 
// expected Sign[ 7 ]
initial
begin
	Sign_expected[7] = 1'bX;
end 
// expected Sign[ 6 ]
initial
begin
	Sign_expected[6] = 1'bX;
end 
// expected Sign[ 5 ]
initial
begin
	Sign_expected[5] = 1'bX;
end 
// expected Sign[ 4 ]
initial
begin
	Sign_expected[4] = 1'bX;
end 
// expected Sign[ 3 ]
initial
begin
	Sign_expected[3] = 1'bX;
end 
// expected Sign[ 2 ]
initial
begin
	Sign_expected[2] = 1'bX;
end 
// expected Sign[ 1 ]
initial
begin
	Sign_expected[1] = 1'bX;
end 
// expected OPERATOR[ 15 ]
initial
begin
	OPERATOR_expected[15] = 1'bX;
end 
// expected OPERATOR[ 14 ]
initial
begin
	OPERATOR_expected[14] = 1'bX;
end 
// expected OPERATOR[ 13 ]
initial
begin
	OPERATOR_expected[13] = 1'bX;
end 
// expected OPERATOR[ 12 ]
initial
begin
	OPERATOR_expected[12] = 1'bX;
end 
// expected OPERATOR[ 11 ]
initial
begin
	OPERATOR_expected[11] = 1'bX;
end 
// expected OPERATOR[ 10 ]
initial
begin
	OPERATOR_expected[10] = 1'bX;
end 
// expected OPERATOR[ 9 ]
initial
begin
	OPERATOR_expected[9] = 1'bX;
end 
// expected OPERATOR[ 8 ]
initial
begin
	OPERATOR_expected[8] = 1'bX;
end 
// expected OPERATOR[ 7 ]
initial
begin
	OPERATOR_expected[7] = 1'bX;
end 
// expected OPERATOR[ 6 ]
initial
begin
	OPERATOR_expected[6] = 1'bX;
end 
// expected OPERATOR[ 5 ]
initial
begin
	OPERATOR_expected[5] = 1'bX;
end 
// expected OPERATOR[ 4 ]
initial
begin
	OPERATOR_expected[4] = 1'bX;
end 
// expected OPERATOR[ 3 ]
initial
begin
	OPERATOR_expected[3] = 1'bX;
end 
// expected OPERATOR[ 2 ]
initial
begin
	OPERATOR_expected[2] = 1'bX;
end 
// expected OPERATOR[ 1 ]
initial
begin
	OPERATOR_expected[1] = 1'bX;
end 
// expected OPERATOR[ 0 ]
initial
begin
	OPERATOR_expected[0] = 1'bX;
end 
// expected student_id[ 7 ]
initial
begin
	student_id_expected[7] = 1'bX;
end 
// expected student_id[ 6 ]
initial
begin
	student_id_expected[6] = 1'bX;
end 
// expected student_id[ 5 ]
initial
begin
	student_id_expected[5] = 1'bX;
end 
// expected student_id[ 4 ]
initial
begin
	student_id_expected[4] = 1'bX;
end 
// expected student_id[ 3 ]
initial
begin
	student_id_expected[3] = 1'bX;
end 
// expected student_id[ 2 ]
initial
begin
	student_id_expected[2] = 1'bX;
end 
// expected student_id[ 1 ]
initial
begin
	student_id_expected[1] = 1'bX;
end 
// generate trigger
always @(currentState_expected or currentState or OPERATOR_expected or OPERATOR or R1Binary_expected or R1Binary or R2Binary_expected or R2Binary or R_first_four_expected or R_first_four or R_last_four_expected or R_last_four or Sign_expected or Sign or student_id_expected or student_id)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected currentState = %b | expected OPERATOR = %b | expected R1Binary = %b | expected R2Binary = %b | expected R_first_four = %b | expected R_last_four = %b | expected Sign = %b | expected student_id = %b | ",currentState_expected_prev,OPERATOR_expected_prev,R1Binary_expected_prev,R2Binary_expected_prev,R_first_four_expected_prev,R_last_four_expected_prev,Sign_expected_prev,student_id_expected_prev);
	$display("| real currentState = %b | real OPERATOR = %b | real R1Binary = %b | real R2Binary = %b | real R_first_four = %b | real R_last_four = %b | real Sign = %b | real student_id = %b | ",currentState_prev,OPERATOR_prev,R1Binary_prev,R2Binary_prev,R_first_four_prev,R_last_four_prev,Sign_prev,student_id_prev);
`endif
	if (
		( currentState_expected_prev[0] !== 1'bx ) && ( currentState_prev[0] !== currentState_expected_prev[0] )
		&& ((currentState_expected_prev[0] !== last_currentState_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentState[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentState_expected_prev);
		$display ("     Real value = %b", currentState_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentState_exp[0] = currentState_expected_prev[0];
	end
	if (
		( currentState_expected_prev[1] !== 1'bx ) && ( currentState_prev[1] !== currentState_expected_prev[1] )
		&& ((currentState_expected_prev[1] !== last_currentState_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentState[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentState_expected_prev);
		$display ("     Real value = %b", currentState_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentState_exp[1] = currentState_expected_prev[1];
	end
	if (
		( currentState_expected_prev[2] !== 1'bx ) && ( currentState_prev[2] !== currentState_expected_prev[2] )
		&& ((currentState_expected_prev[2] !== last_currentState_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentState[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentState_expected_prev);
		$display ("     Real value = %b", currentState_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentState_exp[2] = currentState_expected_prev[2];
	end
	if (
		( currentState_expected_prev[3] !== 1'bx ) && ( currentState_prev[3] !== currentState_expected_prev[3] )
		&& ((currentState_expected_prev[3] !== last_currentState_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currentState[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currentState_expected_prev);
		$display ("     Real value = %b", currentState_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_currentState_exp[3] = currentState_expected_prev[3];
	end
	if (
		( OPERATOR_expected_prev[0] !== 1'bx ) && ( OPERATOR_prev[0] !== OPERATOR_expected_prev[0] )
		&& ((OPERATOR_expected_prev[0] !== last_OPERATOR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[0] = OPERATOR_expected_prev[0];
	end
	if (
		( OPERATOR_expected_prev[1] !== 1'bx ) && ( OPERATOR_prev[1] !== OPERATOR_expected_prev[1] )
		&& ((OPERATOR_expected_prev[1] !== last_OPERATOR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[1] = OPERATOR_expected_prev[1];
	end
	if (
		( OPERATOR_expected_prev[2] !== 1'bx ) && ( OPERATOR_prev[2] !== OPERATOR_expected_prev[2] )
		&& ((OPERATOR_expected_prev[2] !== last_OPERATOR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[2] = OPERATOR_expected_prev[2];
	end
	if (
		( OPERATOR_expected_prev[3] !== 1'bx ) && ( OPERATOR_prev[3] !== OPERATOR_expected_prev[3] )
		&& ((OPERATOR_expected_prev[3] !== last_OPERATOR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[3] = OPERATOR_expected_prev[3];
	end
	if (
		( OPERATOR_expected_prev[4] !== 1'bx ) && ( OPERATOR_prev[4] !== OPERATOR_expected_prev[4] )
		&& ((OPERATOR_expected_prev[4] !== last_OPERATOR_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[4] = OPERATOR_expected_prev[4];
	end
	if (
		( OPERATOR_expected_prev[5] !== 1'bx ) && ( OPERATOR_prev[5] !== OPERATOR_expected_prev[5] )
		&& ((OPERATOR_expected_prev[5] !== last_OPERATOR_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[5] = OPERATOR_expected_prev[5];
	end
	if (
		( OPERATOR_expected_prev[6] !== 1'bx ) && ( OPERATOR_prev[6] !== OPERATOR_expected_prev[6] )
		&& ((OPERATOR_expected_prev[6] !== last_OPERATOR_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[6] = OPERATOR_expected_prev[6];
	end
	if (
		( OPERATOR_expected_prev[7] !== 1'bx ) && ( OPERATOR_prev[7] !== OPERATOR_expected_prev[7] )
		&& ((OPERATOR_expected_prev[7] !== last_OPERATOR_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[7] = OPERATOR_expected_prev[7];
	end
	if (
		( OPERATOR_expected_prev[8] !== 1'bx ) && ( OPERATOR_prev[8] !== OPERATOR_expected_prev[8] )
		&& ((OPERATOR_expected_prev[8] !== last_OPERATOR_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[8] = OPERATOR_expected_prev[8];
	end
	if (
		( OPERATOR_expected_prev[9] !== 1'bx ) && ( OPERATOR_prev[9] !== OPERATOR_expected_prev[9] )
		&& ((OPERATOR_expected_prev[9] !== last_OPERATOR_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[9] = OPERATOR_expected_prev[9];
	end
	if (
		( OPERATOR_expected_prev[10] !== 1'bx ) && ( OPERATOR_prev[10] !== OPERATOR_expected_prev[10] )
		&& ((OPERATOR_expected_prev[10] !== last_OPERATOR_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[10] = OPERATOR_expected_prev[10];
	end
	if (
		( OPERATOR_expected_prev[11] !== 1'bx ) && ( OPERATOR_prev[11] !== OPERATOR_expected_prev[11] )
		&& ((OPERATOR_expected_prev[11] !== last_OPERATOR_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[11] = OPERATOR_expected_prev[11];
	end
	if (
		( OPERATOR_expected_prev[12] !== 1'bx ) && ( OPERATOR_prev[12] !== OPERATOR_expected_prev[12] )
		&& ((OPERATOR_expected_prev[12] !== last_OPERATOR_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[12] = OPERATOR_expected_prev[12];
	end
	if (
		( OPERATOR_expected_prev[13] !== 1'bx ) && ( OPERATOR_prev[13] !== OPERATOR_expected_prev[13] )
		&& ((OPERATOR_expected_prev[13] !== last_OPERATOR_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[13] = OPERATOR_expected_prev[13];
	end
	if (
		( OPERATOR_expected_prev[14] !== 1'bx ) && ( OPERATOR_prev[14] !== OPERATOR_expected_prev[14] )
		&& ((OPERATOR_expected_prev[14] !== last_OPERATOR_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[14] = OPERATOR_expected_prev[14];
	end
	if (
		( OPERATOR_expected_prev[15] !== 1'bx ) && ( OPERATOR_prev[15] !== OPERATOR_expected_prev[15] )
		&& ((OPERATOR_expected_prev[15] !== last_OPERATOR_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPERATOR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPERATOR_expected_prev);
		$display ("     Real value = %b", OPERATOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OPERATOR_exp[15] = OPERATOR_expected_prev[15];
	end
	if (
		( R1Binary_expected_prev[0] !== 1'bx ) && ( R1Binary_prev[0] !== R1Binary_expected_prev[0] )
		&& ((R1Binary_expected_prev[0] !== last_R1Binary_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Binary[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Binary_expected_prev);
		$display ("     Real value = %b", R1Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R1Binary_exp[0] = R1Binary_expected_prev[0];
	end
	if (
		( R1Binary_expected_prev[1] !== 1'bx ) && ( R1Binary_prev[1] !== R1Binary_expected_prev[1] )
		&& ((R1Binary_expected_prev[1] !== last_R1Binary_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Binary[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Binary_expected_prev);
		$display ("     Real value = %b", R1Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R1Binary_exp[1] = R1Binary_expected_prev[1];
	end
	if (
		( R1Binary_expected_prev[2] !== 1'bx ) && ( R1Binary_prev[2] !== R1Binary_expected_prev[2] )
		&& ((R1Binary_expected_prev[2] !== last_R1Binary_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Binary[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Binary_expected_prev);
		$display ("     Real value = %b", R1Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R1Binary_exp[2] = R1Binary_expected_prev[2];
	end
	if (
		( R1Binary_expected_prev[3] !== 1'bx ) && ( R1Binary_prev[3] !== R1Binary_expected_prev[3] )
		&& ((R1Binary_expected_prev[3] !== last_R1Binary_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Binary[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Binary_expected_prev);
		$display ("     Real value = %b", R1Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R1Binary_exp[3] = R1Binary_expected_prev[3];
	end
	if (
		( R2Binary_expected_prev[0] !== 1'bx ) && ( R2Binary_prev[0] !== R2Binary_expected_prev[0] )
		&& ((R2Binary_expected_prev[0] !== last_R2Binary_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Binary[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Binary_expected_prev);
		$display ("     Real value = %b", R2Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R2Binary_exp[0] = R2Binary_expected_prev[0];
	end
	if (
		( R2Binary_expected_prev[1] !== 1'bx ) && ( R2Binary_prev[1] !== R2Binary_expected_prev[1] )
		&& ((R2Binary_expected_prev[1] !== last_R2Binary_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Binary[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Binary_expected_prev);
		$display ("     Real value = %b", R2Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R2Binary_exp[1] = R2Binary_expected_prev[1];
	end
	if (
		( R2Binary_expected_prev[2] !== 1'bx ) && ( R2Binary_prev[2] !== R2Binary_expected_prev[2] )
		&& ((R2Binary_expected_prev[2] !== last_R2Binary_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Binary[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Binary_expected_prev);
		$display ("     Real value = %b", R2Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R2Binary_exp[2] = R2Binary_expected_prev[2];
	end
	if (
		( R2Binary_expected_prev[3] !== 1'bx ) && ( R2Binary_prev[3] !== R2Binary_expected_prev[3] )
		&& ((R2Binary_expected_prev[3] !== last_R2Binary_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Binary[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Binary_expected_prev);
		$display ("     Real value = %b", R2Binary_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R2Binary_exp[3] = R2Binary_expected_prev[3];
	end
	if (
		( Sign_expected_prev[0] !== 1'bx ) && ( Sign_prev[0] !== Sign_expected_prev[0] )
		&& ((Sign_expected_prev[0] !== last_Sign_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[0] = Sign_expected_prev[0];
	end
	if (
		( Sign_expected_prev[1] !== 1'bx ) && ( Sign_prev[1] !== Sign_expected_prev[1] )
		&& ((Sign_expected_prev[1] !== last_Sign_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[1] = Sign_expected_prev[1];
	end
	if (
		( Sign_expected_prev[2] !== 1'bx ) && ( Sign_prev[2] !== Sign_expected_prev[2] )
		&& ((Sign_expected_prev[2] !== last_Sign_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[2] = Sign_expected_prev[2];
	end
	if (
		( Sign_expected_prev[3] !== 1'bx ) && ( Sign_prev[3] !== Sign_expected_prev[3] )
		&& ((Sign_expected_prev[3] !== last_Sign_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[3] = Sign_expected_prev[3];
	end
	if (
		( Sign_expected_prev[4] !== 1'bx ) && ( Sign_prev[4] !== Sign_expected_prev[4] )
		&& ((Sign_expected_prev[4] !== last_Sign_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[4] = Sign_expected_prev[4];
	end
	if (
		( Sign_expected_prev[5] !== 1'bx ) && ( Sign_prev[5] !== Sign_expected_prev[5] )
		&& ((Sign_expected_prev[5] !== last_Sign_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[5] = Sign_expected_prev[5];
	end
	if (
		( Sign_expected_prev[6] !== 1'bx ) && ( Sign_prev[6] !== Sign_expected_prev[6] )
		&& ((Sign_expected_prev[6] !== last_Sign_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Sign_exp[6] = Sign_expected_prev[6];
	end
	if (
		( student_id_expected_prev[0] !== 1'bx ) && ( student_id_prev[0] !== student_id_expected_prev[0] )
		&& ((student_id_expected_prev[0] !== last_student_id_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[0] = student_id_expected_prev[0];
	end
	if (
		( student_id_expected_prev[1] !== 1'bx ) && ( student_id_prev[1] !== student_id_expected_prev[1] )
		&& ((student_id_expected_prev[1] !== last_student_id_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[1] = student_id_expected_prev[1];
	end
	if (
		( student_id_expected_prev[2] !== 1'bx ) && ( student_id_prev[2] !== student_id_expected_prev[2] )
		&& ((student_id_expected_prev[2] !== last_student_id_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[2] = student_id_expected_prev[2];
	end
	if (
		( student_id_expected_prev[3] !== 1'bx ) && ( student_id_prev[3] !== student_id_expected_prev[3] )
		&& ((student_id_expected_prev[3] !== last_student_id_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[3] = student_id_expected_prev[3];
	end
	if (
		( student_id_expected_prev[4] !== 1'bx ) && ( student_id_prev[4] !== student_id_expected_prev[4] )
		&& ((student_id_expected_prev[4] !== last_student_id_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[4] = student_id_expected_prev[4];
	end
	if (
		( student_id_expected_prev[5] !== 1'bx ) && ( student_id_prev[5] !== student_id_expected_prev[5] )
		&& ((student_id_expected_prev[5] !== last_student_id_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[5] = student_id_expected_prev[5];
	end
	if (
		( student_id_expected_prev[6] !== 1'bx ) && ( student_id_prev[6] !== student_id_expected_prev[6] )
		&& ((student_id_expected_prev[6] !== last_student_id_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_id[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_id_expected_prev);
		$display ("     Real value = %b", student_id_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_id_exp[6] = student_id_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg Enable_Decoder;
reg FSM_reset;
reg Reset_A;
reg Reset_B;
// wires                                               
wire [0:3] currentState;
wire [0:15] OPERATOR;
wire [0:3] R1Binary;
wire [0:3] R2Binary;
wire [1:7] R_first_four;
wire [1:7] R_last_four;
wire [1:7] Sign;
wire [1:7] student_id;

wire sampler;                             

// assign statements (if any)                          
lab6 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.currentState(currentState),
	.data_in(data_in),
	.Enable_Decoder(Enable_Decoder),
	.FSM_reset(FSM_reset),
	.OPERATOR(OPERATOR),
	.R1Binary(R1Binary),
	.R2Binary(R2Binary),
	.R_first_four(R_first_four),
	.R_last_four(R_last_four),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.Sign(Sign),
	.student_id(student_id)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// data_in
initial
begin
	data_in = 1'b0;
	data_in = #130000 1'b1;
end 

// Enable_Decoder
initial
begin
	Enable_Decoder = 1'b0;
	Enable_Decoder = #130000 1'b1;
end 

// FSM_reset
initial
begin
	FSM_reset = 1'b0;
end 

// Reset_A
initial
begin
	Reset_A = 1'b1;
end 

// Reset_B
initial
begin
	Reset_B = 1'b1;
end 

lab6_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.Enable_Decoder(Enable_Decoder),
	.FSM_reset(FSM_reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sampler_tx(sampler)
);

lab6_vlg_check_tst tb_out(
	.currentState(currentState),
	.OPERATOR(OPERATOR),
	.R1Binary(R1Binary),
	.R2Binary(R2Binary),
	.R_first_four(R_first_four),
	.R_last_four(R_last_four),
	.Sign(Sign),
	.student_id(student_id),
	.sampler_rx(sampler)
);
endmodule

